plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'org.ajoberstar.grgit'
    id 'com.google.gms.google-services'
}

def keystoreVarSet = System.env.ANDROID_KEY != null
def keystorePropertiesVarSet = System.env.KEYSTORE_PROPERTIES != null
def signBuild = keystoreVarSet && keystorePropertiesVarSet
def keystorePropertiesFile
def keystoreProperties
if (signBuild) {

    // Create a variable called keystorePropertiesFile, and initialize it to your
    // keystore.properties file, in the rootProject folder.
    keystorePropertiesFile = rootProject.file("$System.env.KEYSTORE_PROPERTIES")

    // Initialize a new Properties() object called keystoreProperties.
    keystoreProperties = new Properties()

    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    println "Signing has been configured"
} else {
    String reason = "Signing will not occur because environment variables have not been set correctly because:\n"
    if (!keystoreVarSet) {
        reason += "ANDROID_KEY var not defined\n"
    }
    if (!keystorePropertiesVarSet) {
        reason += "KEYSTORE_PROPERTIES var not defined\n"
    }
    println reason
}

// Used to get commit of current HEAD and store it in
import org.ajoberstar.grgit.Grgit
Grgit grgit = Grgit.open()

android {
    buildToolsVersion "30.0.2"
    ndkVersion "21.3.6528147"
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.launchkey.android.authenticator.demo"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        defaultPublishConfig getBuildToUpload()
    }


    buildFeatures.viewBinding = true

    flavorDimensions "languageApp", "env", "mapProvider", "fips"
    productFlavors {
        javaApp {
            dimension "languageApp"
            applicationIdSuffix ".javaApp"
        }
        kotlinApp {
            dimension "languageApp"
            applicationIdSuffix ".kotlinApp"
        }
        prod {
            dimension "env"
        }
        np {
            dimension "env"
        }
        beta {
            dimension "env"
        }
        googleMaps {
            dimension 'mapProvider'
            versionNameSuffix ".googleMaps"
        }
        openStreetMaps {
            dimension "mapProvider"
            versionNameSuffix ".openStreetMaps"
        }
        fips_on {
            dimension "fips"
        }
        fips_off {
            dimension "fips"
        }
    }

    if (signBuild) {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file("$System.env.ANDROID_KEY")
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        String[] releaseProguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro']
        release {
            minifyEnabled true
            proguardFiles releaseProguardFiles
            resValue("string", "demo_commit_hash", grgit.head().id)
            if (signBuild) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled true
            proguardFiles releaseProguardFiles + 'debug-proguard-rules.pro'
            resValue("string", "demo_commit_hash", grgit.head().id)
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            reports {
                junitXml.enabled = true
                html.enabled = true
            }
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }
}

//This enables setting which build to upload via command line argument. Ex. "-PbuildUpload=debug"
def getBuildToUpload(){
    return hasProperty('buildUpload') ? buildUpload : "release"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def ccj = "libs/ccj-3.0.1.aar"
    if (file(ccj).exists()) {
        fips_onImplementation files(ccj)
    }

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support
    def supportLibsVersion = "28.0.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'

    // Google Play Services
    implementation "com.google.android.gms:play-services-base:17.2.1"
    implementation "com.google.android.gms:play-services-location:17.0.0"
    implementation "com.google.android.gms:play-services-wearable:17.0.0"

    // Firebase
    implementation "com.google.firebase:firebase-messaging:20.3.0"

    // Open Street Maps updated to latest version for API 29
    openStreetMapsImplementation 'org.osmdroid:osmdroid-android:6.1.2@aar'

    // Google Maps
    googleMapsImplementation 'com.google.android.gms:play-services-maps:16.1.0'

    // Auth SDK
    implementation LaunchKeyCoreSDK
    implementation LaunchKeyUISDK
}
